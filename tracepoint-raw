#!/usr/bin/env python3

from bcc import BPF
from bcc.syscall import syscalls, syscall_name
import time
import argparse
import sys
import os
from ctypes import *
import socket, struct

BPF_SRC = "strace.c"
BPF_SRC_EDITED = "strace_edited.c"

parser = argparse.ArgumentParser(
    description="A version of strace using eBPF")

parser.add_argument("-p", "--pid", help="trace this PID only", required=True)
args = parser.parse_args()


# Read PID from command line, setup PID filter
if args.pid:
    with open(BPF_SRC) as f:
        new_text = f.read().replace("PID_FILTER_BEGIN", f"if (pid == {args.pid} || ppid == {args.pid}) {{").replace("PID_FILTER_END", f"}}")
    with open(BPF_SRC_EDITED, "w") as f:
        f.write(new_text)

b = BPF(src_file=BPF_SRC_EDITED)

# Print header
print("Beginning tracing...")

def print_event(cpu, data, size):
    event = b["events"].event(data)

    # Map each syscall to its corresponding format string
    print_format = { 
            0   : f"(FD: {event.fd} | BUF: {event.argv0}... | COUNT: {event.count})",
            1   : f"(FD: {event.fd} | BUF: {event.argv0}... | COUNT: {event.count})",
            2   : f"(FILENAME: {event.filename} | FLAGS: {event.flags} | MODE: {event.mode})",
            3   : f"(FD: {event.fd})",
            5   : f"(FD: {event.fd})",
            21  : F"(FILENAME: {event.filename} | MODE: {event.mode})",
            32  : f"(FD: {event.fd})",
            33  : f"(OLD FD: {event.fd} | NEW FD: {event.new_fd})",
            42  : f"(IP: {socket.inet_ntoa(struct.pack('<L', event.s_addr))} | PORT: {event.port})",
            59  : f"(FD: {event.fd} | FILENAME: {event.filename} | ARGV0: {event.argv0} | ARGV1: {event.argv1} | ARGV2: {event.argv2} | ARGV3: {event.argv3} |)",
            62  : f"(PID: {event.pid} | SIGNAL: {event.signal})",
            86  : f"(OLDNAME: {event.argv1} | NEWNAME: {event.argv2})",
            87  : f"(PATHNAME: {event.argv0})",
            88  : f"(OLDNAME: {event.argv1} | NEWNAME: {event.argv2})",
            90  : f"(FILENAME: {event.filename} | MODE: {event.mode})",
            217 : f"(FD: {event.fd} | FILE INFO: [d_name={event.argv0}, d_ino={event.d_inode}, d_type={event.d_type}, d_reclen={event.d_reclen}...])",
            231 : f"(ERRORCODE: {event.count})",
            257 : f"(FD: {event.fd} | FILENAME: {event.argv0} | FLAGS: {event.flags} | MODE: {event.mode})",
            266 : f"(OLDNAME: {event.argv1} | NEWFD: {event.fd} | NEWNAME: {event.argv2})",
     }

    sys_name = syscall_name(event.syscall_id).decode('utf-8')
    
    try:
        syscall_args = print_format[event.syscall_id]
        print(f"{event.comm} | {sys_name}{syscall_args}={event.ret}")
    except:
        # Syscall not yet supported--just print out it's name and char 
        # representation of its arguments
        print(f"{event.comm} | {sys_name}({event.argv0} | {event.argv1} | {event.argv2} | {event.argv3})={event.ret}")

    # If end is set, stop tracing
    if event.end:
        print("exit_group() received, stopping trace...", "*" * 40)
        os._exit(0)

# Increase the page count to minimize number of lost events
b["events"].open_perf_buffer(print_event, page_cnt=16)
while 1:
    try:
        b.perf_buffer_poll()
    except KeyboardInterrupt:
        break
